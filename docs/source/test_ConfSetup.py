# ********RoostGPT********
"""
Test generated by RoostGPT for test pythonHTest5 using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test pythonHTest5 using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=setup_b1fec8e9f1
ROOST_METHOD_SIG_HASH=setup_e7a99adb1e


```
Scenario 1: Successful connection of "strip_class_signature" function to the "autodoc-process-signature"
Details:
  TestName: test_autodoc_process_signature_connection
  Description: This test is intended to verify if the "strip_class_signature" function is successfully connected to the "autodoc-process-signature".
Execution:
  Arrange: In this step, an instance of the app is prepared which is the parameter to the function setup.
  Act: Invoke the setup function with the instance of app prepared in the Arrange step.
  Assert: Check if "strip_class_signature" function is connected to the "autodoc-process-signature".
Validation:
  The successful connection of these components validates the functionality of function setup and demonstrates that Python decorators are working as expected.

Scenario 2: Successful connection of "strip_class_signature_docstring" function to the "autodoc-process-docstring"
Details:
  TestName: test_autodoc_process_docstring_connection
  Description: This test is intended to verify if the "strip_class_signature_docstring" function is successfully connected to the "autodoc-process-docstring".
Execution:
  Arrange: In this test, an instance of the app is prepared as well which is the parameter to the function setup.
  Act: Invoke the setup function with the instance of app prepared in the Arrange step.
  Assert: Check if "strip_class_signature_docstring" function is connected to the "autodoc-process-docstring".
Validation:
  The successful connection of these components validates the functionality of function setup. This assures that Python decorators are working as expected.

Scenario 3: Check if custom.css file is added successfully
Details:
  TestName: test_custom_css_file_addition
  Description: This test is intended to verify if the custom.css file is added correctly without any issues.
Execution:
  Arrange: Prepare an instance of the app which is the parameter to the function setup.
  Act: Invoke the setup function with the instance of app prepared in the Arrange step.
  Assert: Check whether the custom.css file has been added successfully.
Validation:
  The verification of successful file addition guarantees that the function setup is performing correctly. This is crucial for the overall aesthetics of the app as it involves the addition of a CSS file.
"""

# ********RoostGPT********
import pytest
from conf import setup
from unittest.mock import MagicMock, call

@pytest.mark.regression
def test_autodoc_process_signature_connection():
    # Arrange
    app = MagicMock()
    
    # Act
    setup(app)

    # Assert
    assert call.connect('autodoc-process-signature', strip_class_signature) in app.mock_calls

@pytest.mark.regression
def test_autodoc_process_docstring_connection():
    # Arrange
    app = MagicMock()
    
    # Act
    setup(app)
    
    # Assert
    assert call.connect('autodoc-process-docstring', strip_class_signature_docstring) in app.mock_calls

@pytest.mark.regression
def test_custom_css_file_addition():
    # Arrange
    app = MagicMock()

    # Act
    setup(app)
    
    # Assert
    assert call.add_css_file('custom.css') in app.mock_calls
