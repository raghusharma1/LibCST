# ********RoostGPT********
"""
Test generated by RoostGPT for test pythonHTest5 using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test pythonHTest5 using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=strip_class_signature_docstring_332b024e2a
ROOST_METHOD_SIG_HASH=strip_class_signature_docstring_b67668b32f


```
Scenario 1: Function Behavior when "what" parameter is "class"
Details:
  TestName: test_strip_class_signature_docstring_with_class_signature
  Description: To validate if the function correctly removes all lines from 'lines' array when the "what" is 'class' and first line in 'lines' starts with class name.
Execution:
  Arrange: Initialize 'app', 'what' as 'class', 'name' as 'test.name', 'obj' as None, 'options' as {}, 'lines' as ['name', 'line1', 'line2'].
  Act: Invoke strip_class_signature_docstring with initialised variables.
  Assert: The array 'lines' should be empty.
Validation:
  Rationalize: This test checks the function's ability to strip all lines if the first line starts with a class name. It's a core part of the function's purpose.

Scenario 2: Function Behavior when "what" parameter is not "class"
Details:
  TestName: test_strip_class_signature_docstring_without_class_signature
  Description: To validate that if the 'what' parameter is not "class", the function doesn't modify the 'lines' array.
Execution:
  Arrange: Initialize 'app', 'what' as 'not_class', 'name' as 'test.name', 'obj' as None, 'options' as {}, 'lines' as ['name', 'line1', 'line2']
  Act: Invoke strip_class_signature_docstring with initialised variables.
  Assert: The array 'lines' should be equal to ['name', 'line1', 'line2'].
Validation:
  Rationalize: Important to test that the function doesn't modify the 'lines' array if the condition is not met. This confirms the function respects the conditional logic and doesn't behave unexpectedly.

Scenario 3: Function Behavior when 'lines' array is empty.
Details:
  TestName: test_strip_class_signature_docstring_with_empty_lines
  Description: Ensures function doesn't break or behave unexpectedly if the 'lines' array is empty.
Execution:
  Arrange: Initialize 'app', 'what' as 'class', 'name' as 'test.name', 'obj' as None, 'options' as {}, 'lines' as []
  Act: Invoke strip_class_signature_docstring with initialised variables.
  Assert: The array 'lines' should remain an empty array.
Validation:
  Rationalize: By testing with an empty 'lines' array, we validate the function can handle and exit gracefully from empty input, contributing to the robustness of the function.
```
"""

# ********RoostGPT********
import pytest
from conf import strip_class_signature_docstring


class Test_ConfStripClassSignatureDocstring:
    @pytest.mark.positive
    def test_strip_class_signature_docstring_with_class_signature(self):
        # Arrange: Initialize variables.
        app = None
        what = 'class'
        name = 'test.name'
        obj = None
        options = {}
        lines = ['name', 'line1', 'line2']
  
        # Act: Invoke strip_class_signature_docstring with initialised variables.
        strip_class_signature_docstring(app, what, name, obj, options, lines)

        # Assert: The array 'lines' should be empty.
        assert lines == []

    @pytest.mark.negative
    def test_strip_class_signature_docstring_without_class_signature(self):
        # Arrange: Initialize variables.
        app = None
        what = 'not_class'
        name = 'test.name'
        obj = None
        options = {}
        lines = ['name', 'line1', 'line2']

        # Act: Invoke strip_class_signature_docstring with initialised variables.
        strip_class_signature_docstring(app, what, name, obj, options, lines)

        # Assert: The array 'lines' should be equal to ['name', 'line1', 'line2'].
        assert lines == ['name', 'line1', 'line2']

    @pytest.mark.negative
    def test_strip_class_signature_docstring_with_empty_lines(self):
        # Arrange: Initialize variables.
        app = None
        what = 'class'
        name = 'test.name'
        obj = None
        options = {}
        lines = []

        # Act: Invoke strip_class_signature_docstring with initialised variables.
        strip_class_signature_docstring(app, what, name, obj, options, lines)

        # Assert: The array 'lines' should remain an empty array.
        assert lines == []