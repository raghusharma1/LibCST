# ********RoostGPT********
"""
Test generated by RoostGPT for test pythonHTest5 using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test pythonHTest5 using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=context_11e5b0af63
ROOST_METHOD_SIG_HASH=context_58b489ef56


```
Scenario 1: Testing context method for non-empty line before syntax error line
Details:
  Test Name: test_context_for_non_empty_line_after
  Description: This test aims to verify that when the syntax error occurs on a blank line, the `context` method should provide the nearest non-blank line before it.
Execution:
  Arrange: Initialize a string with several lines of correct code followed by blank lines and a syntax error.
  Act: Parse the string with a Python parser to intentionally raise a syntax error and call the `context` method.
  Assert: Assert that the returned context contains the line that contains the correct code.
Validation:
  It's important to ensure that the `context` method can correctly provide the nearest non-blank line as a context for the syntax error. This will help users quickly locate the syntax error.

Scenario 2: Testing context method for blank file.
Details:
  Test Name: test_context_for_blank_file
  Description: This test aims to verify that when the syntax error occurs in an entirely empty file, the `context` method should return None.
Execution:
  Arrange: Initialize an entirely blank string.
  Act: Parse the string with a Python parser to intentionally raise a syntax error and call the `context` method.
  Assert: Assert that the returned context is None.
Validation:
  The `context` method should handle this edge case correctly. This validation is important because users may inadvertently save an entirely blank Python file and then attempt to run it.

Scenario 3: Testing context method for non-empty line on syntax error line.
Details:
  Test Name: test_context_for_non_empty_line_on_error_line
  Description: This test aims to verify that when the syntax error occurs on a line with text, the `context` method should return the syntax error line.
Execution:
  Arrange: Initialize a string with correct Python code lines followed by a line with a syntax error.
  Act: Parse the string with a Python parser to intentionally raise a syntax error and call the `context` method.
  Assert: Assert that the returned context contains the line with the syntax error.
Validation:
  It's important to ensure that the `context` correctly points our the syntax error line. This will help users quickly locate and fix the syntax error.
```
"""

# ********RoostGPT********
import pytest
from _exceptions import ParserSyntaxError
from libcst._tabs import expand_tabs

@pytest.mark.regression
def test_context_for_non_empty_line_after():
    parser_err = ParserSyntaxError(
        message='Syntax Error occurred',
        lines=['print("Hello")', '', '1print'], 
        raw_line=3,
        raw_column=1
    )
    
    assert parser_err.context() == f'{expand_tabs(parser_err._lines[0])}\n^'
    

@pytest.mark.regression
def test_context_for_blank_file():
    parser_err = ParserSyntaxError(
        message='Syntax Error occurred',
        lines=['', '', ''], 
        raw_line=3,
        raw_column=1
    )

    assert parser_err.context() == None
    
    
@pytest.mark.regression
def test_context_for_non_empty_line_on_error_line():
    parser_err = ParserSyntaxError(
        message='Syntax Error occurred',
        lines=['print("Hello")', '1print'], 
        raw_line=2,
        raw_column=1
    )
    
    assert parser_err.context() == f'{expand_tabs(parser_err._lines[1])}\n^'
