# ********RoostGPT********
"""
Test generated by RoostGPT for test pythonHTest5 using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test pythonHTest5 using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=__reduce___00b0d0cb3e
ROOST_METHOD_SIG_HASH=__reduce___ca51ac90c6


```
Scenario 1: Basic Reduction
Details:
  TestName: test_basic_reduction
  Description: This test validates the basic reduction scenario where all parameters are present and python object is reduced successfully.
Execution:
  Arrange: Initialize the object of "ParserSyntaxError" class by passing all the required parameters. 
  Act: Invoke the __reduce__ function on the initiated object.
  Assert: Check if the returned tuple is correct and contains the python object constructed by _parser_syntax_error_unpickle and a tuple contains all the details about the object.
Validation:
  This test ensures __reduce__ returned values are correct based on passed values, ensuring the function can correctly reduce complex objects for object serialization.

Scenario 2: No lines
Details:
  TestName: test_no_lines_reduction
  Description: This test validates the reduction scenario where the lines parameter is not provided.
Execution:
  Arrange: Initialize the object of "ParserSyntaxError" class by passing all required parameters except the "lines" parameter.
  Act: Invoke the __reduce__ function on the initiated object.
  Assert: Check if the returned tuple is correct without "lines" parameter.
Validation:
  This test validates that the __reduce__ function can handle cases where the "lines" parameter is not provided.

Scenario 3: Empty lines list
Details:
  TestName: test_empty_lines_reduction
  Description: This test validates the reduction scenario where the lines parameter is an empty list.
Execution:
  Arrange: Initialize the object of "ParserSyntaxError" class with message and give the "lines" parameter as an empty list.
  Act: Invoke the __reduce__ function on the initiated object.
  Assert: Check if the returned tuple is correct with "lines" parameter as an empty list.
Validation:
  This verifies that __reduce__ function can handle cases when "lines" parameter is an empty list.

Scenario 4: Negative raw_line and raw_column
Details:
  TestName: test_negative_values_reduction
  Description: This test validates the reduction scenario where the raw_line and raw_column parameters are negative.
Execution:
  Arrange: Initialize the object of "ParserSyntaxError" class with message, lines and give "raw_line" and "raw_column" value as negative.
  Act: Invoke the __reduce__ function on the initiated object.
  Assert: Check if the returned tuple is correct with negative "raw_line" and "raw_column" values.
Validation:
  This verifies that __reduce__ function can handle cases when "raw_line" and "raw_column" are negative and applies the business rule to adjust these values.
```

"""

# ********RoostGPT********
import pytest
from _exceptions import ParserSyntaxError
from typing import Sequence

class Test_ParserSyntaxErrorReduce:
    @pytest.mark.smoke
    @pytest.mark.positive
    @pytest.mark.regression
    def test_basic_reduction(self):
        # Arrange
        obj = ParserSyntaxError("TestMessage", lines = ["1", "2"], raw_line = 1, raw_column = 2)
        
        # Act
        result = obj.__reduce__()

        # Assert
        assert isinstance(result, tuple)
        assert len(result) == 2
        assert result[0].__name__ == "_parser_syntax_error_unpickle"
        assert result[1][0]["message"] == "TestMessage"
        assert result[1][0]["lines"] == ["1", "2"]
        assert result[1][0]["raw_line"] == 1
        assert result[1][0]["raw_column"] == 2

    @pytest.mark.smoke
    @pytest.mark.negative
    @pytest.mark.regression
    def test_no_lines_reduction(self):
        # Arrange
        obj = ParserSyntaxError("TestMessage", raw_line=1, raw_column=2)

        # Act
        result = obj.__reduce__()

        # Assert
        assert isinstance(result, tuple)
        assert len(result) == 2
        assert result[0].__name__ == "_parser_syntax_error_unpickle"
        assert result[1][0]["message"] == "TestMessage"
        assert result[1][0]["raw_line"] == 1
        assert result[1][0]["raw_column"] == 2

    @pytest.mark.smoke
    @pytest.mark.negative
    @pytest.mark.regression
    def test_empty_lines_reduction(self):
        # Arrange
        obj = ParserSyntaxError("TestMessage", lines=[], raw_line=1, raw_column=2)

        # Act
        result = obj.__reduce__()

        # Assert
        assert isinstance(result, tuple)
        assert len(result) == 2
        assert result[0].__name__ == "_parser_syntax_error_unpickle"
        assert result[1][0]["message"] == "TestMessage"
        assert result[1][0]["lines"] == []
        assert result[1][0]["raw_line"] == 1
        assert result[1][0]["raw_column"] == 2

    @pytest.mark.smoke
    @pytest.mark.negative
    @pytest.mark.regression
    def test_negative_values_reduction(self):
        # Arrange
        obj = ParserSyntaxError("TestMessage", lines = ["1", "2"], raw_line = -1, raw_column = -2)
        
        # Act
        result = obj.__reduce__()

        # Assert
        assert isinstance(result, tuple)
        assert len(result) == 2
        assert result[0].__name__ == "_parser_syntax_error_unpickle"
        assert result[1][0]["message"] == "TestMessage"
        assert result[1][0]["lines"] == ["1", "2"]
        assert result[1][0]["raw_line"] == -1
        assert result[1][0]["raw_column"] == -2
