# ********RoostGPT********
"""
Test generated by RoostGPT for test pythonHTest5 using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test pythonHTest5 using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=visit_Assert_whitespace_after_assert_67c41a23e6
ROOST_METHOD_SIG_HASH=visit_Assert_whitespace_after_assert_c51499f399


Scenario 1: Test with passing Assert node as a parameter
Details:
  TestName: test_whitespace_after_assert_with_assert_node
  Description: This test is intended to verify proper functioning of the visit_Assert_whitespace_after_assert method when passed a Assert node as input.
Execution:
  Arrange: Initialize an object with Assert node.
  Act: Invoke the visit_Assert_whitespace_after_assert method with the Assert node object as parameter.
  Assert: Verify that the method doesn't raise any exceptions.
Validation:
  This test verifies that the function is capable of handling valid input correctly, supporting its main functionality and requirement.

Scenario 2: Test with non-existing node type as parameter
Details:
  TestName: test_whitespace_after_assert_with_non_existing_node
  Description: This test is meant to check if any exceptions occur when passing a non-existing node type.
Execution:
  Arrange: Initialize a non-existing node type object.
  Act: Call the visit_Assert_whitespace_after_assert method using the non-existing node type object as a parameter.
  Assert: Expect an exception due to a wrong input.
Validation:
  This test ensures that function correctly responds to inputs that do not represent an expected usage, enhancing code reliability and stability.

Scenario 3: Test with None as a parameter
Details:
  TestName: test_whitespace_after_assert_with_None
  Description: This test is meant to verify if the function doesn't break upon receiving None as an argument.
Execution:
  Arrange: No arrangement is needed.
  Act: Invoke the visit_Assert_whitespace_after_assert method using None as a parameter.
  Assert: Check if the function runs without throwing exceptions when None is given as an argument.
Validation:
  This test ensures that the function correctly responds to None input, enhancing code reliability and stability.

Scenario 4: Test with different nodes apart from Assert node
Details:
  TestName: test_whitespace_after_assert_with_different_nodes
  Description: This test is meant to verify how the function behaves when passed different nodes apart from Assert node e.g 'Return' node.
Execution:
  Arrange: Initialize different node types.
  Act: Invoke the visit_Assert_whitespace_after_assert method using the established nodes as parameters.
  Assert: Verify the function doesn't throw any exceptions.
Validation:
  By performing this test, we ensure that the function can correctly respond to and manage all the libcst nodes, thus increasing its flexibility and robustness.
"""

# ********RoostGPT********
import pytest
from _typed_visitor import visit_Assert_whitespace_after_assert
from libcst._nodes.statement import Assert, Return
from libcst._exceptions import CSTValidationError

class Test_CstTypedBaseFunctionsVisitAssertWhitespaceAfterAssert:

    def test_whitespace_after_assert_with_assert_node(self):
        test_object = Assert()
        # No Exception should be raised when a right type is provided
        try:
            visit_Assert_whitespace_after_assert(test_object)
        except Exception:
            pytest.fail("Unexpected Exception raised!")

    def test_whitespace_after_assert_with_non_existing_node(self):
        test_object = "non_existing_node"
        # An exception expected when wrong type is provided
        with pytest.raises(CSTValidationError):
            visit_Assert_whitespace_after_assert(test_object)

    def test_whitespace_after_assert_with_None(self):
        test_object = None
        try:
            visit_Assert_whitespace_after_assert(test_object)
        except Exception as err:
            pytest.fail("Unexpected Exception raised!")

    @pytest.mark.parametrize("node", [Return(), 123, "ABC", 12.34])
    def test_whitespace_after_assert_with_different_nodes(self, node):
        # Function should not raise exception for different type of nodes
        try:
            visit_Assert_whitespace_after_assert(node)
        except Exception:
            pytest.fail("Unexpected Exception raised!")
