# ********RoostGPT********
"""
Test generated by RoostGPT for test pythonHTest5 using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test pythonHTest5 using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=leave_Assert_whitespace_after_assert_d3dda2c46d
ROOST_METHOD_SIG_HASH=leave_Assert_whitespace_after_assert_a89b3fdeb3


```
Scenario 1: Validate default behavior of the Function leave_Assert_whitespace_after_assert
Details:
  TestName: test_default_behavior
  Description: This test is intended to verify the function's default behavior. 
               As per the function definition, the function does not perform any operation and returns None.
Execution:
  Arrange: Initialize a 'Assert' object.
  Act: Invoke the function leave_Assert_whitespace_after_assert by passing the 'Assert' object.
  Assert: Check if the return of the function is None.
Validation: 
  It is necessary to validate that the function exhibits its expected default behavior while operating under normal conditions. This is in line with the function's specifications.

Scenario 2: Verify functionality when the Assert object contains Whitespace
Details:
  TestName: test_assert_contains_whitespace
  Description: This test is intended to verify that the function does not alter the structure of the Assert object even if it contains whitespaces.
Execution:
  Arrange: Initialize a 'Assert' object that contains white space.
  Act: Invoke the function leave_Assert_whitespace_after_assert by passing the 'Assert' object.
  Assert: Check if the original Assert object remains unaltered after the function call.
Validation: 
  This test contributes to ensure that the function does not modify the structure or contents of the passed object, adhering to its specifications.

Scenario 3: Test the functionality of the function when a subclass of Assert is passed
Details:
  TestName: test_handling_of_subclass
  Description: This test verifies that the function can handle subclasses of Assert without errors or unnecessary modifications.
Execution:
  Arrange:  Initialize a subclass of 'Assert' object.
  Act: Invoke the function leave_Assert_whitespace_after_assert on the subclass object.
  Assert: Check if the original subclass object remains unaltered and the function returns None.
Validation: 
  As the function definition accepts an 'Assert' type, it should work correctly with any subclasses of 'Assert'. Verifying this supports the function's adherence to the Liskov substitution principle.
```
"""

# ********RoostGPT********
import pytest
from libcst._nodes.statement import Assert
from libcst._nodes.whitespace import SimpleWhitespace
from _typed_visitor import leave_Assert_whitespace_after_assert

class Test_CstTypedBaseFunctionsLeaveAssertWhitespaceAfterAssert:

    @pytest.mark.smoke
    def test_default_behavior(self):
        test_assert = Assert(test=SimpleWhitespace(value=''))
        assert leave_Assert_whitespace_after_assert(test_assert) == None

    @pytest.mark.regression
    def test_assert_contains_whitespace(self):
        test_assert = Assert(test=SimpleWhitespace(value=' '))
        original_assert = test_assert
        leave_Assert_whitespace_after_assert(test_assert)
        assert test_assert == original_assert

    @pytest.mark.regression
    def test_handling_of_subclass(self):
        class SubAssert(Assert):
            pass

        test_assert = SubAssert(test=SimpleWhitespace(value=''))
        original_assert = test_assert
        leave_Assert_whitespace_after_assert(test_assert)
        assert test_assert == original_assert
        assert leave_Assert_whitespace_after_assert(test_assert) == None
